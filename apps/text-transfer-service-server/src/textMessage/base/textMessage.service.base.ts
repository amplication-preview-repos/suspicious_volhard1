/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TextMessage as PrismaTextMessage } from "@prisma/client";

export class TextMessageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TextMessageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.textMessage.count(args);
  }

  async textMessages(
    args: Prisma.TextMessageFindManyArgs
  ): Promise<PrismaTextMessage[]> {
    return this.prisma.textMessage.findMany(args);
  }
  async textMessage(
    args: Prisma.TextMessageFindUniqueArgs
  ): Promise<PrismaTextMessage | null> {
    return this.prisma.textMessage.findUnique(args);
  }
  async createTextMessage(
    args: Prisma.TextMessageCreateArgs
  ): Promise<PrismaTextMessage> {
    return this.prisma.textMessage.create(args);
  }
  async updateTextMessage(
    args: Prisma.TextMessageUpdateArgs
  ): Promise<PrismaTextMessage> {
    return this.prisma.textMessage.update(args);
  }
  async deleteTextMessage(
    args: Prisma.TextMessageDeleteArgs
  ): Promise<PrismaTextMessage> {
    return this.prisma.textMessage.delete(args);
  }
}
