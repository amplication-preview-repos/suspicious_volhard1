/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TextMessage } from "./TextMessage";
import { TextMessageCountArgs } from "./TextMessageCountArgs";
import { TextMessageFindManyArgs } from "./TextMessageFindManyArgs";
import { TextMessageFindUniqueArgs } from "./TextMessageFindUniqueArgs";
import { CreateTextMessageArgs } from "./CreateTextMessageArgs";
import { UpdateTextMessageArgs } from "./UpdateTextMessageArgs";
import { DeleteTextMessageArgs } from "./DeleteTextMessageArgs";
import { TextMessageService } from "../textMessage.service";
@graphql.Resolver(() => TextMessage)
export class TextMessageResolverBase {
  constructor(protected readonly service: TextMessageService) {}

  async _textMessagesMeta(
    @graphql.Args() args: TextMessageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TextMessage])
  async textMessages(
    @graphql.Args() args: TextMessageFindManyArgs
  ): Promise<TextMessage[]> {
    return this.service.textMessages(args);
  }

  @graphql.Query(() => TextMessage, { nullable: true })
  async textMessage(
    @graphql.Args() args: TextMessageFindUniqueArgs
  ): Promise<TextMessage | null> {
    const result = await this.service.textMessage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TextMessage)
  async createTextMessage(
    @graphql.Args() args: CreateTextMessageArgs
  ): Promise<TextMessage> {
    return await this.service.createTextMessage({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TextMessage)
  async updateTextMessage(
    @graphql.Args() args: UpdateTextMessageArgs
  ): Promise<TextMessage | null> {
    try {
      return await this.service.updateTextMessage({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TextMessage)
  async deleteTextMessage(
    @graphql.Args() args: DeleteTextMessageArgs
  ): Promise<TextMessage | null> {
    try {
      return await this.service.deleteTextMessage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
