/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TextMessageService } from "../textMessage.service";
import { TextMessageCreateInput } from "./TextMessageCreateInput";
import { TextMessage } from "./TextMessage";
import { TextMessageFindManyArgs } from "./TextMessageFindManyArgs";
import { TextMessageWhereUniqueInput } from "./TextMessageWhereUniqueInput";
import { TextMessageUpdateInput } from "./TextMessageUpdateInput";

export class TextMessageControllerBase {
  constructor(protected readonly service: TextMessageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TextMessage })
  async createTextMessage(
    @common.Body() data: TextMessageCreateInput
  ): Promise<TextMessage> {
    return await this.service.createTextMessage({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        messageContent: true,
        senderDevice: true,
        receiverDevice: true,
        timestamp: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TextMessage] })
  @ApiNestedQuery(TextMessageFindManyArgs)
  async textMessages(@common.Req() request: Request): Promise<TextMessage[]> {
    const args = plainToClass(TextMessageFindManyArgs, request.query);
    return this.service.textMessages({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        messageContent: true,
        senderDevice: true,
        receiverDevice: true,
        timestamp: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TextMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async textMessage(
    @common.Param() params: TextMessageWhereUniqueInput
  ): Promise<TextMessage | null> {
    const result = await this.service.textMessage({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        messageContent: true,
        senderDevice: true,
        receiverDevice: true,
        timestamp: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TextMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTextMessage(
    @common.Param() params: TextMessageWhereUniqueInput,
    @common.Body() data: TextMessageUpdateInput
  ): Promise<TextMessage | null> {
    try {
      return await this.service.updateTextMessage({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          messageContent: true,
          senderDevice: true,
          receiverDevice: true,
          timestamp: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TextMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTextMessage(
    @common.Param() params: TextMessageWhereUniqueInput
  ): Promise<TextMessage | null> {
    try {
      return await this.service.deleteTextMessage({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          messageContent: true,
          senderDevice: true,
          receiverDevice: true,
          timestamp: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
