/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { IphoneService } from "../iphone.service";
import { IphoneCreateInput } from "./IphoneCreateInput";
import { Iphone } from "./Iphone";
import { IphoneFindManyArgs } from "./IphoneFindManyArgs";
import { IphoneWhereUniqueInput } from "./IphoneWhereUniqueInput";
import { IphoneUpdateInput } from "./IphoneUpdateInput";

export class IphoneControllerBase {
  constructor(protected readonly service: IphoneService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Iphone })
  async createIphone(@common.Body() data: IphoneCreateInput): Promise<Iphone> {
    return await this.service.createIphone({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        deviceName: true,
        deviceId: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Iphone] })
  @ApiNestedQuery(IphoneFindManyArgs)
  async iphones(@common.Req() request: Request): Promise<Iphone[]> {
    const args = plainToClass(IphoneFindManyArgs, request.query);
    return this.service.iphones({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        deviceName: true,
        deviceId: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Iphone })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async iphone(
    @common.Param() params: IphoneWhereUniqueInput
  ): Promise<Iphone | null> {
    const result = await this.service.iphone({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        deviceName: true,
        deviceId: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Iphone })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateIphone(
    @common.Param() params: IphoneWhereUniqueInput,
    @common.Body() data: IphoneUpdateInput
  ): Promise<Iphone | null> {
    try {
      return await this.service.updateIphone({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          deviceName: true,
          deviceId: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Iphone })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteIphone(
    @common.Param() params: IphoneWhereUniqueInput
  ): Promise<Iphone | null> {
    try {
      return await this.service.deleteIphone({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          deviceName: true,
          deviceId: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
