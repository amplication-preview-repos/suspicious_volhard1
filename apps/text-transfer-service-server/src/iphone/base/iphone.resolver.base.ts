/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Iphone } from "./Iphone";
import { IphoneCountArgs } from "./IphoneCountArgs";
import { IphoneFindManyArgs } from "./IphoneFindManyArgs";
import { IphoneFindUniqueArgs } from "./IphoneFindUniqueArgs";
import { CreateIphoneArgs } from "./CreateIphoneArgs";
import { UpdateIphoneArgs } from "./UpdateIphoneArgs";
import { DeleteIphoneArgs } from "./DeleteIphoneArgs";
import { User } from "../../user/base/User";
import { IphoneService } from "../iphone.service";
@graphql.Resolver(() => Iphone)
export class IphoneResolverBase {
  constructor(protected readonly service: IphoneService) {}

  async _iphonesMeta(
    @graphql.Args() args: IphoneCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Iphone])
  async iphones(@graphql.Args() args: IphoneFindManyArgs): Promise<Iphone[]> {
    return this.service.iphones(args);
  }

  @graphql.Query(() => Iphone, { nullable: true })
  async iphone(
    @graphql.Args() args: IphoneFindUniqueArgs
  ): Promise<Iphone | null> {
    const result = await this.service.iphone(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Iphone)
  async createIphone(@graphql.Args() args: CreateIphoneArgs): Promise<Iphone> {
    return await this.service.createIphone({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Iphone)
  async updateIphone(
    @graphql.Args() args: UpdateIphoneArgs
  ): Promise<Iphone | null> {
    try {
      return await this.service.updateIphone({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Iphone)
  async deleteIphone(
    @graphql.Args() args: DeleteIphoneArgs
  ): Promise<Iphone | null> {
    try {
      return await this.service.deleteIphone(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Iphone): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
