/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Iphone as PrismaIphone,
  User as PrismaUser,
} from "@prisma/client";

export class IphoneServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.IphoneCountArgs, "select">): Promise<number> {
    return this.prisma.iphone.count(args);
  }

  async iphones(args: Prisma.IphoneFindManyArgs): Promise<PrismaIphone[]> {
    return this.prisma.iphone.findMany(args);
  }
  async iphone(
    args: Prisma.IphoneFindUniqueArgs
  ): Promise<PrismaIphone | null> {
    return this.prisma.iphone.findUnique(args);
  }
  async createIphone(args: Prisma.IphoneCreateArgs): Promise<PrismaIphone> {
    return this.prisma.iphone.create(args);
  }
  async updateIphone(args: Prisma.IphoneUpdateArgs): Promise<PrismaIphone> {
    return this.prisma.iphone.update(args);
  }
  async deleteIphone(args: Prisma.IphoneDeleteArgs): Promise<PrismaIphone> {
    return this.prisma.iphone.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.iphone
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
